//As fun√ß√µes some e every s√£o parecidas e retornam valores booleanos.

//A fun√ß√£o some retorna true se ao menos um elemento de um array satisfaz a uma condi√ß√£o. J√° o every retorna true se todos os elementos de um array satisfazem a uma condi√ß√£o.

//Array.some
//Imagine que voc√™ esteja respons√°vel por criar um sistema de acesso para as pessoas colaboradas da empresa em que voc√™ trabalha. Para isso, precisa verificar se pelo menos uma dessas pessoas possui o cargo de ger√™ncia. Como voc√™ faria? ü§î

//Como voc√™ precisa descobrir se alguma das pessoas possui o cargo de ger√™ncia e n√£o precisa de mais detalhes sobre essa pessoa, voc√™ pode utilizar o some, que vai retornar true caso encontre algu√©m com esse cargo, sen√£o vai retornar false.

//As informa√ß√µes das pessoas est√£o dentro de um array de objetos conforme o exemplo abaixo:

const pessoas = [
    { nome: 'Ana', cargo: 'Analista' },
    { nome: 'Jo√£o', cargo: 'Ger√™ncia' },
    { nome: 'Aline', cargo: 'Analista' },
    { nome: 'Joana', cargo: 'Ger√™ncia' },
  ];
  
  const verificaCargo = pessoas.some((pessoa) => pessoa.cargo === 'Ger√™ncia');
  
  console.log(verificaCargo); // true
//No c√≥digo acima, √© verificado se dentro do array de pessoas existe algu√©m que possua o cargo de 'Ger√™ncia'. O retorno foi true porque existe pelo menos uma pessoa com esse cargo.

//Agora imagine que voc√™ precise verificar se existe algum nome que comece com a letra desejada. Analise e execute o c√≥digo abaixo:
const listNames = ['Maria', 'Manuela', 'Jorge', 'Ricardo', 'Wilson'];

const verifyFirstLetter = (letter, names) => names.some((name) => name[0] === letter);

console.log(verifyFirstLetter('J', listNames)); // true
console.log(verifyFirstLetter('X', listNames)); // false
//O c√≥digo acima mostra a fun√ß√£o verifyFirstLetter, que recebe como primeiro par√¢metro letter, que √© a letra desejada, e como segundo par√¢metro o array chamado listNames.
//Dentro da fun√ß√£o verifyFirstLetter, √© executado o some para verificar se a primeira letra do nome atual (name[0]) da itera√ß√£o √© igual √† letra desejada (letter).

//_________________________________________________________________________________________//

//Array.every
// Imagine que voc√™ pegou um boletim escolar antigo e quer verificar se passou em todas as mat√©rias. Como voc√™ faria? ü§î

// Ao utilizar a fun√ß√£o every, voc√™ consegue resolver esse problema. Caso tenha passado em todas as mat√©rias, o retorno ser√° true; caso contr√°rio, ser√° false. Analise e execute o c√≥digo abaixo:
const grades = {
    portugues: 'Aprovado',
    matematica: 'Reprovado',
    ingles: 'Aprovado',
  };
  
  const verifyGrades = Object.values(grades).every((grade) => grade === 'Aprovado'); // false
  
  console.log(verifyGrades);

//A vari√°vel verifyGrades √© respons√°vel por salvar a l√≥gica;

// Ao utilizar o Object.values, o retorno ser√° um array com os valores das chaves do objeto grades como ['Aprovado', 'Reprovado', 'Aprovado'];

// Ent√£o o every executa a callback para cada um dos itens do array e verifica se todos eles possuem o texto 'Aprovado';

// O retorno √© false, pois nem todos os valores das chaves do objeto grades s√£o iguais a 'Aprovado'.

//De olho na dica üëÄ: para manter seu c√≥digo conciso e evitar que erros aconte√ßam, voc√™ pode utilizar o m√©todo toLowerCase() para deixar todos os itens do array com letras min√∫sculas. Por exemplo: grade.toLowerCase() === 'aprovado'