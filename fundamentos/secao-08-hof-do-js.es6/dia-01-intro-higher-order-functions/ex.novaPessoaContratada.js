// Nova pessoa contratada
// VocÃª ficou responsÃ¡vel por organizar o sistema de contrataÃ§Ã£o de uma empresa e deve criar uma estrutura de dados que possua o formato { nomeCompleto, email } para representar a nova pessoa contratada. AlÃ©m disso, vocÃª deve gerar os emails de cada pessoa que Ã© contratada na empresa. Para isso:

// crie uma funÃ§Ã£o que receba como parÃ¢metro o nome completo da nova pessoa colaboradora e que automaticamente gere um email no formato nome_da_pessoa@trybe.com;

// utilize a funÃ§Ã£o newEmployees, definida abaixo, para receber a sua funÃ§Ã£o como parÃ¢metro e criar o objeto de cada pessoa contratada.
// const newEmployees = () => {
//     const employees = {
//       id1: '', // Nome: Pedro Guerra -> Chame sua funÃ§Ã£o passando o nome Pedro Guerra como parÃ¢metro, substituindo as aspas
//       id2: '', // Nome: Luiza Drumond -> Chame sua funÃ§Ã£o passando o nome Luiza Drumond como parÃ¢metro, substituindo as aspas
//       id3: '', // Nome: Carla Paiva -> Chame sua funÃ§Ã£o passando o nome Carla Paiva como parÃ¢metro, substituindo as aspas
//     }
//     return employees;
//   };

//Primeiro passo: crie a funÃ§Ã£o que recebe o nome e gera o email da pessoa contratada.
//Ao criar a funÃ§Ã£o, vocÃª deve passar o nome completo por parÃ¢metro e retornar um objeto que vai receber o nome completo e o email.

// Segundo passo: desenvolva a lÃ³gica do email.
// O email vai ser gerado a partir do nome passado por parÃ¢metro.
// Ao criar um email, Ã© importante deixÃ¡-lo padronizado com letras minÃºsculas e utilizar o underline(_) para separar o nome da pessoa. Para isso:
// utilize a funÃ§Ã£o toLowerCase() para deixar as letras minÃºsculas:
// separe o nome utilizando o underline (_):
// O nome vem separado por espaÃ§os; vocÃª pode utilizar o replace para substituir os espaÃ§os por _.
// ObservaÃ§Ã£o ðŸ”Ž: O replace nÃ£o Ã© a Ãºnica maneira de substituir valores em uma string. VocÃª pode utilizar outros mÃ©todos, como o split e o join, etc.
//retorne o email utilizando template literals.

//Terceiro passo: passe a funÃ§Ã£o como parÃ¢metro para cada id dentro de newEmployees.

  const newEmployees = (employeeGenerator) => {
    const employees = {
      id1: employeeGenerator('Pedro Guerra'),
      id2: employeeGenerator('Luiza Drumond'),
      id3: employeeGenerator('Carla Paiva')
    };
    return employees;
  };
  
  const employeeGenerator = (fullName) => {
    const email = fullName.toLowerCase().replace(' ', '_');
    return { fullName, email: `${email}@trybe.com` };
  };
  
  console.log(newEmployees(employeeGenerator));